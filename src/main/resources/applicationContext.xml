<?xml version="1.0" encoding="UTF-8"?>

<!--Validate the tags and manage the schema location of these tags-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!-- bean definitions here -->
<!--    <bean id = "sim" class = "org.dev.ioc.Vodafone"></bean>-->

<!--    This is a constructor dependency injection so we need to provide values in constructor instead of property tag-->
<!--    <bean id = "student" class="org.dev.di.Student">-->
<!--        <constructor-arg name = "studentName" value="Rakesh Guru" type="java.lang.String"/>-->
<!--        <constructor-arg name = "age" value="18" />-->
<!--    </bean>-->

<!--    <bean id = "student1" class="org.dev.di.Student">-->
<!--        <constructor-arg name = "age" value="25" type="int" />-->
<!--    </bean>-->


<!--&lt;!&ndash;    This is an object dependency injection &ndash;&gt;-->
<!--    <bean id="student2" class="org.dev.di_object_type.Student">-->
<!--        <property name="mathCheat">-->
<!--&lt;!&ndash;            for inner bean we don't give id  because it is not required&ndash;&gt;-->
<!--            <bean class="org.dev.di_object_type.MathCheat" />-->
<!--        </property>-->
<!--    </bean>-->

<!--    &lt;!&ndash;    There is another way to configure inner bean &ndash;&gt;-->
<!--    <bean id="newStudent" class="org.dev.di_object_type.NewStudent">-->
<!--        <property name="mathCheat">-->
<!--            &lt;!&ndash;            for inner bean we don't give id  because it is not required&ndash;&gt;-->
<!--            <bean class="org.dev.di_object_type.MathCheat" />-->
<!--        </property>-->
<!--    </bean>-->


<!--    One problem in above is that we are creating two match cheat object for different student, it is not a good approach-->
<!--    If we have 100 students then as per above approach we need to create 100 math cheat objects which is not good -->

<!--    So we will fix it and try to make one math cheat object which can circulate among n number of students-->
<!--    For that we first remove the MathCheat bean from the property and explicitly define math cheat object-->
<!--    And inside the inner property we will add math cheat object reference-->



<!--    <bean id="mathCheatObj" class="org.dev.di_object_type.MathCheat" />-->

<!--    <bean id="stud" class="org.dev.di_object_type.Student">-->
<!--        <property name="mathCheat" ref="mathCheatObj" />-->
<!--    </bean>-->

<!--    <bean id="newStud" class="org.dev.di_object_type.NewStudent">-->
<!--        <property name="mathCheat" ref="mathCheatObj" />-->
<!--    </bean>-->



<!--    Loose coupling -->

<!--    <bean id="scienceCheatObj" class="org.dev.loose_coupling.ScienceCheat" />-->
<!--    <bean id="stud" class="org.dev.loose_coupling.Student">-->
<!--        <property name="cheat" ref="scienceCheatObj" />-->
<!--    </bean>-->

<!--    <bean id="mathCheatObj" class="org.dev.loose_coupling.MathCheat" />-->
<!--    <bean id="stud" class="org.dev.loose_coupling.Student">-->
<!--        <property name="cheat" ref="mathCheatObj" />-->
<!--    </bean>-->



<!--    Practise-->
<!--    <bean id="airtel" class="org.dev.practise.Airtel" />-->
<!--    <bean id="vodafone" class="org.dev.practise.Vodafone" />-->
<!--    <bean id="jio" class="org.dev.practise.Jio" />-->

<!--    <bean id="calling" class="org.dev.practise.CallingService" />-->
<!--    <bean id="data" class="org.dev.practise.DataService" />-->
<!--    <bean id="roaming" class="org.dev.practise.RoamingService" />-->
<!--    <bean id="callertune" class="org.dev.practise.CallertuneService" />-->


<!--    <bean id="sim" class="org.dev.practise.Jio">-->
<!--        <property name="service" ref="calling" />-->
<!--    </bean>-->


<!--    Autowired-->
<!--    <context:component-scan base-package="org.dev.autowired" />-->
<!--    <context:annotation-config />-->

<!--    <bean id="humanHeart" class="org.dev.autowired.Heart"> -->
<!--        <property name="animalName" value="Human" />-->
<!--        <property name="age" value="21" />-->
<!--    </bean>-->

<!--    <bean id="animalHeart" class="org.dev.autowired.Heart">-->
<!--        <property name="animalName" value="Wolf" />-->
<!--        <property name="age" value="3" />-->
<!--    </bean>-->
<!--&lt;!&ndash;    Instead of using autowire here we can also inject dependencies using @Autowired annotation&ndash;&gt;-->
<!--    <bean id="body" class="org.dev.autowired.Body" autowire="constructor">-->
<!--    <bean id="body" class="org.dev.autowired.Body">-->
<!--    &lt;!&ndash;        This property will be automatically injected with the help of Autowiring&ndash;&gt;-->
<!--&lt;!&ndash;        <property name="heart" ref="heart" />&ndash;&gt;-->
<!--    </bean>-->




<!--    Loading from properties files-->
<!--    <context:property-placeholder location="student-info.properties" />-->
<!--    <context:annotation-config />-->

<!--    <bean id="student" class="org.dev.loadingfrompropertiesfile.Student">-->
<!--&lt;!&ndash;        we will dynamicaly set these properties values load from a property file&ndash;&gt;-->
<!--&lt;!&ndash;        <property name="name" value="${student.name}" />&ndash;&gt;-->
<!--&lt;!&ndash;        <property name="interestedCourse" value="${student.interestedCourse}" />&ndash;&gt;-->
<!--&lt;!&ndash;        <property name="hobby" value="${student.hobby}" />&ndash;&gt;-->
<!--&lt;!&ndash;        we can do the above using @Value annotation&ndash;&gt;-->

<!--    </bean>-->

<!--    Loading from properties files practise -->
    <context:annotation-config />
    <context:property-placeholder location="database-connection-config.properties" />

    <bean id="mySql" class="org.dev.practisepropertyloading.MySQL" />
    <bean id="dbConnect" class="org.dev.practisepropertyloading.DbConnection" />




</beans>

